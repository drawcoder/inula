// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String
  account           String             @unique
  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  agents            Agent[]
  testRuns          TestRun[]
  testSets          TestSet[]
  conversations     Conversation[]
}

model Agent {
  id                Int                @id @default(autoincrement())
  description       String?
  name              String
  promptTemplate    String?
  userData          String?
  promptQueries     String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  publishedAt       DateTime?
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  uiActions         UiAction[]
  templateQuestions TemplateQuestion[]
  conversations     Conversation[]
}

model Conversation {
  id           String           @id @default(uuid())
  title        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  agent        Agent            @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId      Int
  messages     Message[]
  metadata     Json?            // 存储会话级别的元数据
}

model Message {
  id             String       @id @default(uuid())
  content        String       @db.Text
  role           String       // 'user' 或 'assistant'
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  metadata       Json?        // 存储消息级别的元数据，如模型参数等
}

model TemplateQuestion {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   Int
}

model UiAction {
  id          Int     @id @default(autoincrement())
  key         String
  type        String
  description String?
  target      String?
  eventName   String?
  param       Json?
  agent       Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId     Int
}

model TestSet {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  testCases   TestCase[]
  testRuns    TestRun[]  @relation("TestSetToTestRun")
}

model TestCase {
  id             String           @id @default(uuid())
  prompt         String
  expectedResult String
  testSet        TestSet          @relation(fields: [testSetId], references: [id], onDelete: Cascade)
  testSetId      String
  testResults    TestCaseResult[]
}

model TestRun {
  id            String           @id @default(uuid())
  name          String
  date          DateTime         @default(now())
  version       String
  totalTests    Int
  passedTests   Int
  failedTests   Int
  avgSimilarity Float
  user          User             @relation(fields: [userId], references: [id])
  userId        Int
  testSets      TestSet[]        @relation("TestSetToTestRun")
  testResults   TestCaseResult[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model TestCaseResult {
  id            String    @id @default(uuid())
  actualResult  String
  similarity    Float
  passed        Boolean
  notes         String?
  testCase      TestCase  @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  testCaseId    String
  testRun       TestRun   @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  testRunId     String
  createdAt     DateTime  @default(now())
}
