import { TYPE_FRAGMENT as Fragment, TYPE_PROFILER as Profiler, TYPE_STRICT_MODE as StrictMode, TYPE_SUSPENSE as Suspense } from './src/external/JSXElementType';
import { Component, PureComponent } from './src/renderer/components/BaseClassComponent';
import { createRef } from './src/renderer/components/CreateRef';
import { Children } from './src/external/ChildrenUtil';
import { createElement, cloneElement, isValidElement, registerComponent } from './src/external/JSXElement';
import { createContext } from './src/renderer/components/context/CreateContext';
import { lazy } from './src/renderer/components/Lazy';
import { forwardRef } from './src/renderer/components/ForwardRef';
import { memo } from './src/renderer/components/Memo';
import './src/external/devtools';
import { useCallback, useContext, useEffect, useImperativeHandle, useLayoutEffect, useRenderEffect, useMemo, useReducer, useRef, useState, useDebugValue } from './src/renderer/hooks/HookExternal';
import { isContextProvider, isContextConsumer, isElement, isValidElementType, isForwardRef, isFragment, isLazy, isMemo, isPortal } from './src/external/HorizonIs';
import { createStore, useStore, clearStore } from './src/horizonx/store/StoreHandler';
import * as reduxAdapter from './src/horizonx/adapters/redux';
import { watch } from './src/horizonx/proxy/watch';
import { act } from './src/external/TestUtil';
import { render, createPortal, unstable_batchedUpdates, findDOMNode, unmountComponentAtNode } from './src/dom/DOMExternal';
import { syncUpdates as flushSync } from './src/renderer/TreeBuilder';
import { getProcessingVNode } from './src/renderer/GlobalVar';
declare const Horizon: {
    Children: {
        forEach: (children: any, func: any, context?: any) => void;
        map: (children: any, func: Function, context?: any) => any[];
        count: (children: any) => number;
        only: (children: any) => any;
        toArray: (children: any) => any[];
    };
    createRef: typeof createRef;
    Component: typeof Component;
    PureComponent: typeof PureComponent;
    createContext: typeof createContext;
    forwardRef: typeof forwardRef;
    getProcessingVNode: typeof getProcessingVNode;
    lazy: typeof lazy;
    memo: typeof memo;
    useDebugValue: () => void;
    useCallback: typeof useCallback;
    useContext: typeof useContext;
    useEffect: typeof useEffect;
    useImperativeHandle: typeof useImperativeHandle;
    useLayoutEffect: typeof useLayoutEffect;
    useRenderEffect: typeof useRenderEffect;
    useMemo: typeof useMemo;
    useReducer: typeof useReducer;
    useRef: typeof useRef;
    useState: typeof useState;
    Fragment: number;
    Profiler: number;
    StrictMode: number;
    Suspense: number;
    createElement: typeof createElement;
    cloneElement: typeof cloneElement;
    isValidElement: typeof isValidElement;
    render: typeof render;
    createPortal: typeof createPortal;
    unstable_batchedUpdates: typeof unstable_batchedUpdates;
    findDOMNode: typeof findDOMNode;
    unmountComponentAtNode: typeof unmountComponentAtNode;
    act: typeof act;
    flushSync: typeof flushSync;
    createStore: typeof createStore;
    useStore: typeof useStore;
    clearStore: typeof clearStore;
    reduxAdapter: typeof reduxAdapter;
    watch: typeof watch;
    isFragment: typeof isFragment;
    isElement: typeof isElement;
    isValidElementType: typeof isValidElementType;
    isForwardRef: typeof isForwardRef;
    isLazy: typeof isLazy;
    isMemo: typeof isMemo;
    isPortal: typeof isPortal;
    isContextProvider: typeof isContextProvider;
    isContextConsumer: typeof isContextConsumer;
    registerComponent: typeof registerComponent;
};
export declare const version: string;
export { Children, createRef, Component, PureComponent, createContext, forwardRef, getProcessingVNode, lazy, memo, useDebugValue, useCallback, useContext, useEffect, useImperativeHandle, useLayoutEffect, useRenderEffect, useMemo, useReducer, useRef, useState, Fragment, Profiler, StrictMode, Suspense, createElement, cloneElement, isValidElement, render, createPortal, unstable_batchedUpdates, findDOMNode, unmountComponentAtNode, act, flushSync, createStore, useStore, clearStore, reduxAdapter, watch, isFragment, isElement, isValidElementType, isForwardRef, isLazy, isMemo, isPortal, isContextProvider, isContextConsumer, registerComponent, };
export default Horizon;
