import type { VNodeTag } from './VNodeTags';
import type { RefType, ContextType, SuspenseState, Source } from '../Types';
import type { Hook } from '../hooks/HookType';
import { Observer } from '../../horizonx/proxy/Observer';
export declare class VNode {
    tag: VNodeTag;
    key: string | null;
    props: any;
    type: any;
    realNode: any;
    parent: VNode | null;
    child: VNode | null;
    next: VNode | null;
    cIndex: number;
    eIndex: number;
    ref: RefType | ((handle: any) => void) | null;
    oldProps: any;
    isCleared: boolean;
    changeList: any;
    effectList: any[] | null;
    updates: any[] | null;
    stateCallbacks: any[] | null;
    isForceUpdate: boolean;
    isSuspended: boolean;
    state: any;
    hooks: Array<Hook<any, any>> | null;
    depContexts: Array<ContextType<any>> | null;
    isDepContextChange: boolean;
    dirtyNodes: Array<VNode> | null;
    shouldUpdate: boolean;
    childShouldUpdate: boolean;
    task: any;
    context: any;
    isLazyComponent: boolean;
    lazyType: any;
    flags: number;
    clearChild: VNode | null;
    isCreated: boolean;
    oldHooks: Array<Hook<any, any>> | null;
    oldState: any;
    oldRef: RefType | ((handle: any) => void) | null;
    oldChild: VNode | null;
    promiseResolve: boolean;
    devProps: any;
    suspenseState: SuspenseState;
    path: string;
    toUpdateNodes: Set<VNode> | null;
    delegatedEvents: Set<string>;
    belongClassVNode: VNode | null;
    isStoreChange: boolean;
    observers: Set<Observer> | null;
    classComponentWillUnmount: ((vNode: VNode) => any) | null;
    src: Source | null;
    constructor(tag: VNodeTag, props: any, key: null | string, realNode: any);
}
